
bcview {
    // Terrain
    systems.terrain.TerrainDraw :- (InstanceBuffer, TerrainChunkInstanceData)

    Prefab DebugDrawPrefab {
        - OVERRIDE|(ShadowPass, DebugShadowPipeline)
        - OVERRIDE|(TransparentPass, DebugTransparentPipeline)
        - Elements {24}
        - Color {1.0, 0.0, 1.0, 1.0}
        - (InstanceBuffer, DebugInstanceData)
        - DebugRender
    }

    Prefab DebugArrowPrefab {
        - OVERRIDE|(TransparentPass, DebugArrowPipeline)
        - Elements {6}
        - Color {1.0, 0.0, 1.0, 1.0}
        // NOTE: overriding maxInstances only works when set on a prefab; otherwise, the OnAdd observer won't pick up on the initial value before allocating space for the buffer. TODO: should separate buffer declaration and storage into separate components
        - (InstanceBuffer, ArrowInstanceData) {maxInstances: 65536}
        - DebugRender
    }

    // debug draw
    destinationArrows : DebugArrowPrefab {
        - Color {0.9, 0.9, 0.9, 1.0}
        - QueryDesc {expr: "Position, Destination, Plane(up(bc.planes.IsIn)), (bc.actors.Action, bc.actors.Action.ActionMove)"}
    }

    riverArrows : DebugArrowPrefab {
        - Color {0.3, 0.3, 1.0, 1.0}
        - TerrainRender
    }

    player : DebugDrawPrefab {
        - Color {0.6, 0.0, 0.8, 1.0}
        - QueryDesc {expr: "Position, Plane(up(bc.planes.IsIn)), bc.actors.MapVision"}
    }

    characters : DebugDrawPrefab {
        - Color {0.3, 0.3, 1.0, 1.0}
        - QueryDesc {expr: "Position, Plane(up(bc.planes.IsIn)), bc.actors.Individual"}
    }

    carnivores : DebugDrawPrefab {
        - Color {0.7, 0.0, 0.0, 1.0}
        - QueryDesc {expr: "Position, Plane(up(bc.planes.IsIn)), (bc.wildlife.Diet, bc.wildlife.Diet.Meat)"}
    }

    berry_pickers : DebugDrawPrefab {
        - Color {0.7, 0.0, 0.7, 1.0}
        - QueryDesc {expr: "Position, Plane(up(bc.planes.IsIn)), (bc.wildlife.Diet, bc.wildlife.Diet.Fruit)"}
    }

    arbivores : DebugDrawPrefab {
        - Color {0.0, 0.7, 0.7, 1.0}
        - QueryDesc {expr: "Position, Plane(up(bc.planes.IsIn)), (bc.wildlife.Diet, bc.wildlife.Diet.Foliage)"}
    }

    grazers : DebugDrawPrefab {
        - Color {0.0, 0.7, 0.0, 1.0}
        - QueryDesc {expr: "Position, Plane(up(bc.planes.IsIn)), (bc.wildlife.Diet, bc.wildlife.Diet.Grasses)"}
    }

    tectonics : DebugDrawPrefab {
        - Color {0.7, 0.8, 0.7, 1.0}
        - QueryDesc {expr: "Position, Plane(up(bc.planes.IsIn)), bc.elementals.PlateShiftStrength"}
    }

    volcanos : DebugDrawPrefab {
        - Color {0.9, 0.5, 0.0, 1.0}
        - QueryDesc {expr: "Position, Plane(up(bc.planes.IsIn)), (bc.actors.Ego, bc.actors.Ego.EgoVolcanoSpirit)"}
    }

    storms : DebugDrawPrefab {
        - Color {0.5, 0.5, 0.8, 1.0}
        - QueryDesc {expr: "Position, Plane(up(bc.planes.IsIn)), (bc.actors.Ego, bc.actors.Ego.EgoStormSpirit)"}
    }

    villages : DebugDrawPrefab {
        - Color {0.9, 0.9, 0.1, 1.0}
        - QueryDesc {expr: "Position, Plane(up(bc.planes.IsIn)), bc.tribes.Village"}
    }

    // TEST: disable shadow pass by default
    //phases.OnPassShadow :- Disabled

    // TEST: default visibility override
    //Visibility :- Visibility {override: 2}

    // brush tools
    AdditiveBrush {
        - Tool
        - AdditiveBrush {value: 1}
        - BrushSize {radius: 1}
        - (BrushField, bc.planes.CellData.height)
    }

    ValueBrush {
        - Tool
        - ValueBrush {value: 1}
        - BrushSize {radius: 1}
        - (BrushField, bc.planes.CellData.height)
    }

    RiverBrush {
        - Tool
        - RiverBrush {value: 1}
    }

    PrefabBrush {
        - Tool
        - PrefabBrush {prefab: 0}
    }

    // input map
    Input {
        using bcview.systems.input
        cameraKeyboardBindings {
            - InputBindGroup
            w :- InputBinding {key: 119, axis: {0, 1}, triggerOn: BC_INPUT_HELD, system: CameraPan}
            a :- InputBinding {key: 97, axis: {1, 0}, triggerOn: BC_INPUT_HELD, system: CameraPan}
            s :- InputBinding {key: 115, axis: {0, -1}, triggerOn: BC_INPUT_HELD, system: CameraPan}
            d :- InputBinding {key: 100, axis: {-1, 0}, triggerOn: BC_INPUT_HELD, system: CameraPan}

            q :- InputBinding {key: 113, axis: {1, 0}, triggerOn: BC_INPUT_HELD, system: CameraOrbit}
            e :- InputBinding {key: 101, axis: {-1, 0}, triggerOn: BC_INPUT_HELD, system: CameraOrbit}
            r :- InputBinding {key: 114, axis: {0, 1}, triggerOn: BC_INPUT_HELD, system: CameraOrbit}
            f :- InputBinding {key: 102, axis: {0, -1}, triggerOn: BC_INPUT_HELD, system: CameraOrbit}

            x :- InputBinding {key: 120, axis: {0, 1}, triggerOn: BC_INPUT_HELD, system: CameraZoom}
            z :- InputBinding {key: 122, axis: {0, -1}, triggerOn: BC_INPUT_HELD, system: CameraZoom}

            c :- InputBinding {key: 99, system: CameraToPlayer}
        }

        cameraMouseBindings {
            - InputBindGroup
            pan :- InputBinding {button: BC_MOUSE_LEFT, triggerOn: BC_INPUT_HELD, motion: BC_MOTION_MOUSE, system: CameraPan}
            orbit :- InputBinding {button: BC_MOUSE_RIGHT, triggerOn: BC_INPUT_HELD, motion: BC_MOTION_MOUSE, system: CameraOrbit}
            // TODO: might be nice to change cursor while left click is held?
            // bindings to lock mouse while orbiting
            lockRight :- InputBinding {button: BC_MOUSE_RIGHT, triggerOn: BC_INPUT_PRESSED, system: LockMouse}
            unlockRight :- InputBinding {button: BC_MOUSE_RIGHT, triggerOn: BC_INPUT_RELEASED, system: UnlockMouse}
        }
        //cameraMouseBindings :- Disabled

        middleMouseBindings {
            - InputBindGroup
            selectCell :- InputBinding {button: BC_MOUSE_MIDDLE, system: SelectCell}
            zoom :- InputBinding {motion: BC_MOTION_SCROLL, system: CameraZoom}
        }

        actorMouseBindings {
            - InputBindGroup
            selectCell :- InputBinding {button: BC_MOUSE_LEFT, system: SelectCell}
            selectEntity :- InputBinding {button: BC_MOUSE_LEFT, system: SelectEntity}
            spawnPrefab :- InputBinding {button: BC_MOUSE_RIGHT, system: PaintPrefabBrush}
        }
        //actorMouseBindings :- Disabled

        playerMouseBindings {
            - InputBindGroup
            selectCell :- InputBinding {button: BC_MOUSE_LEFT, system: SelectCell}
            selectEntity :- InputBinding {button: BC_MOUSE_LEFT, system: SelectEntity}
            movePlayer :- InputBinding {button: BC_MOUSE_RIGHT, system: SetPlayerDestination}
        }
        //playerMouseBindings :- Disabled

        terrainMouseBindings {
            - InputBindGroup
            raise :- InputBinding {button: BC_MOUSE_LEFT, axis: {1, 0}, system: PaintAdditiveBrush}
            raiseOnMove :- InputBinding {button: BC_MOUSE_LEFT, axis: {1, 0}, motion: BC_MOTION_TILE, system: PaintAdditiveBrush}
            lower :- InputBinding {button: BC_MOUSE_RIGHT, axis: {-1, 0}, system: PaintAdditiveBrush}
            lowerOnMove :- InputBinding {button: BC_MOUSE_RIGHT, axis: {-1, 0}, motion: BC_MOTION_TILE, system: PaintAdditiveBrush}
            value :- InputBinding {button: BC_MOUSE_MIDDLE, system: PaintValueBrush}
            // FIXME: why doesn't tile motion input trigger with middle mouse button?
            valueOnMove :- InputBinding {button: BC_MOUSE_MIDDLE, motion: BC_MOTION_TILE, system: PaintValueBrush}
        }
        //terrainMouseBindings :- Disabled

        riverMouseBindings {
            - InputBindGroup
            createOnMove :- InputBinding {button: BC_MOUSE_LEFT, axis: {1, 0}, motion: BC_MOTION_TILE, system: PaintRiverBrush}
            removeOnMove :- InputBinding {button: BC_MOUSE_RIGHT, axis: {-1, 0}, motion: BC_MOTION_TILE, system: PaintRiverBrush}
        }
        //terrainMouseBindings :- Disabled
    }
}
